[devshell]
name = "apple-container"
motd = """
üçé Apple Container Development Environment
========================================

Welcome to the Apple Container development shell!

Quick Start:
  1. setup-xcode     - Configure Xcode for macOS 26
  2. build-container - Build Apple Container
  3. test-container  - Run tests

Requirements:
  ‚Ä¢ macOS 26 (you have this ‚úÖ)
  ‚Ä¢ Xcode with macOS 26 SDK support
  ‚Ä¢ Swift 6.2 (provided ‚úÖ)

Sources:
  ‚Ä¢ Container: $CONTAINER_SRC
  ‚Ä¢ Containerization: $CONTAINERIZATION_SRC

Environment:
  ‚Ä¢ Swift: $SWIFT_EXEC
"""

[[commands]]
name = "add-xcode-to-store"
help = "Add extracted Xcode.app to Nix store"
command = '''
echo "üîß Adding Existing Xcode to Nix Store"
echo "====================================="
echo ""

# Check if Xcode.app exists in current directory
if [ ! -d "/Applications/Xcode-beta.app" ]; then
  echo "‚ùå Xcode.app not found in current directory"
  echo ""
  echo "Please extract your Xcode .xip file first:"
  echo "  open -W Xcode_XX.X.xip"
  echo "Then run this script from the directory containing Xcode.app"
  echo ""
  exit 1
fi

echo "‚úÖ Found Xcode.app in current directory"

# Verify it has macOS SDK
sdk_path="/Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs"
if [ -d "$sdk_path" ]; then
  echo "‚úÖ Found macOS SDK:"
  ls -la "$sdk_path"
else
  echo "‚ö†Ô∏è  Warning: Could not find macOS SDK at expected location"
fi

echo ""
echo "üì¶ Adding Xcode.app to Nix store..."

# Add to store and capture the path and hash
store_path=$(nix-store --add-fixed --recursive sha256 /Applications/Xcode-beta.app)
hash=$(nix-store --query --hash "$store_path")

echo "‚úÖ Successfully added to Nix store!"
echo ""
echo "Store path: $store_path"
echo "SHA256: $hash"
echo ""
echo "üîÑ Update your flake.nix with this hash:"
echo "   sha256 = \"$hash\";"
echo ""
echo "üí° You can now remove the local Xcode.app directory"
echo "   The Nix store version will be used for builds"
'''

[[commands]]
name = "swift"
help = "Swift 6.2 compiler"
package = "swift"

[[commands]]
name = "setup-xcode"
help = "Set up Xcode for macOS 26 development"
command = '''
echo "üîß Xcode Setup Check"
echo "==================="
if [ -d "/Applications/Xcode.app" ]; then
  echo "‚úÖ Found system Xcode at /Applications/Xcode.app"
  xcode_version=$(xcodebuild -version 2>/dev/null | head -1 || echo "Unknown")
  echo "   Version: $xcode_version"
  sdk_path=$(xcrun --show-sdk-path 2>/dev/null || echo "")
  echo "   SDK: $sdk_path"
  export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
  export SDKROOT="$sdk_path"
  echo "‚úÖ Xcode environment configured"
else
  echo "‚ùå No system Xcode found"
  echo "Please install Xcode from Apple Developer Portal"
fi
'''

[[commands]]
name = "build-container"
help = "Build Apple Container with Swift 6.2"
command = '''
echo "üöÄ Building Apple Container"
echo "=========================="

# Set up build environment
export HOME="${HOME:-$TMPDIR}"
export SWIFTPM_DISABLE_SANDBOX=1
export MACOSX_DEPLOYMENT_TARGET=26.0

# Use system Xcode
if [ -d "/Applications/Xcode.app" ]; then
  export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
  export SDKROOT="$(xcrun --show-sdk-path 2>/dev/null || echo '')"
fi

echo "Environment:"
echo "  Swift: $(which swift) - $(swift --version | head -1)"
echo "  Xcode: ${DEVELOPER_DIR:-'Not set'}"
echo "  SDK: ${SDKROOT:-'Not set'}"
echo ""

# Go to container source if not already there
if [ ! -f "Package.swift" ] && [ -d "$CONTAINER_SRC" ]; then
  echo "üìÅ Switching to container source directory..."
  cd "$CONTAINER_SRC"
fi

if [ -f "Package.swift" ]; then
  echo "üî® Building with Swift Package Manager..."
  swift build --configuration release --disable-sandbox -v
  echo ""
  echo "‚úÖ Build complete!"
  echo "Executables should be in .build/release/"
else
  echo "‚ùå No Package.swift found"
  echo "Please run from the container source directory or use 'goto-container'"
fi
'''

[[commands]]
name = "test-container"
help = "Run Apple Container tests"
command = '''
echo "üß™ Testing Apple Container"
echo "========================="

# Set up test environment
export HOME="${HOME:-$TMPDIR}"
export SWIFTPM_DISABLE_SANDBOX=1
export MACOSX_DEPLOYMENT_TARGET=26.0

if [ -d "/Applications/Xcode.app" ]; then
  export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
  export SDKROOT="$(xcrun --show-sdk-path 2>/dev/null || echo '')"
fi

# Go to container source if not already there
if [ ! -f "Package.swift" ] && [ -d "$CONTAINER_SRC" ]; then
  cd "$CONTAINER_SRC"
fi

if [ -f "Package.swift" ]; then
  echo "üèÉ Running tests..."
  swift test --disable-sandbox
else
  echo "‚ùå No Package.swift found"
fi
'''

[[commands]]
name = "swift-info"
help = "Show Swift configuration"
command = '''
echo "Swift 6.2 Development Snapshot"
echo "=============================="
echo "Path: $(which swift)"
swift --version
'''

[[commands]]
name = "xcode-info"
help = "Show Xcode configuration"
command = '''
if [ -d "/Applications/Xcode.app" ]; then
  echo "System Xcode: /Applications/Xcode.app"
  xcodebuild -version 2>/dev/null || echo "Version: Unknown"
  echo "SDK: $(xcrun --show-sdk-path 2>/dev/null || echo 'Not found')"
else
  echo "‚ùå No system Xcode found at /Applications/Xcode.app"
  echo "Please install Xcode from Apple Developer Portal"
fi
'''

[[commands]]
name = "goto-container"
help = "Change to container source directory"
command = "cd $CONTAINER_SRC && exec $SHELL"

[[commands]]
name = "goto-containerization"
help = "Change to containerization source directory"  
command = "cd $CONTAINERIZATION_SRC && exec $SHELL"

[[commands]]
name = "clean-build"
help = "Clean build artifacts"
command = '''
if [ -f "Package.swift" ]; then
  echo "üßπ Cleaning build artifacts..."
  swift package clean
  rm -rf .build
  echo "‚úÖ Clean complete"
else
  echo "‚ùå No Package.swift found. Run from project directory."
fi
'''

[[commands]]
name = "quick-build"
help = "Quick debug build"
command = '''
if [ ! -f "Package.swift" ] && [ -d "$CONTAINER_SRC" ]; then
  cd "$CONTAINER_SRC"
fi

if [ -f "Package.swift" ]; then
  echo "üöÄ Quick debug build..."
  export SWIFTPM_DISABLE_SANDBOX=1
  swift build --disable-sandbox
else
  echo "‚ùå No Package.swift found"
fi
'''

# Environment variables as separate sections
[[env]]
name = "SWIFTPM_DISABLE_SANDBOX"
value = "1"

[[env]]
name = "MACOSX_DEPLOYMENT_TARGET" 
value = "26.0"
